{"version":3,"sources":["webpack://mesto/./src/components/Card.js","webpack://mesto/./src/constants.js","webpack://mesto/./src/components/FormValidator.js","webpack://mesto/./src/components/Section.js","webpack://mesto/./src/components/Popup.js","webpack://mesto/./src/components/PopupWithImage.js","webpack://mesto/./src/components/PopupWithForm.js","webpack://mesto/./src/components/UserInfo.js","webpack://mesto/./src/components/Api.js","webpack://mesto/./src/pages/index.js","webpack://mesto/./src/components/PopupConfirm.js"],"names":["Card","item","cardSelector","myId","handleLikeClick","handleCardClick","handleDeleteClick","this","_item","_cardUserId","_handleLikeClick","_handleCardClick","_handleDeleteClick","_handleCardClickHandler","bind","_cardSelector","document","querySelector","content","cloneNode","_element","_getTemplate","_cardImage","src","link","alt","name","textContent","_showLikes","_hideCardRemoveButton","_setEventListeners","owner","_id","classList","add","_getIsLiked","likes","length","remove","some","like","likesInfo","addEventListener","editForm","addForm","changeAvatarForm","showImagePopup","editButton","nameProfile","professionProfile","nameEditField","professionEditField","addCardButton","popupEditProfile","popupAddCard","popupEditAvatar","formSaveButton","formSaveButtonEditProfile","formSaveButtonEditAvatar","formSaveButtonAddCard","popupConfirmRemoval","editAvatarButton","avatarProfile","validationObj","formSelector","inputSelector","saveButtonSelector","inputInvalidClass","buttonInvalidClass","FormValidator","obj","form","_obj","_form","_saveButton","_inputsList","Array","from","querySelectorAll","input","errorMessage","error","id","_inputInvalidClass","validity","valid","_hideInputError","_showInputError","validationMessage","isActive","disabled","forEach","_checkInputValidity","_toggleButtonState","checkValidity","evt","preventDefault","Section","containerSelector","renderer","_renderer","_container","cardElement","append","prepend","cards","Popup","popup","_popup","_handleEscClose","removeEventListener","key","close","target","contains","_handleOverlayClose","PopupWithImage","_link","_name","PopupWithForm","handleFormSubmit","_handleFormSubmit","_inputList","_formValues","value","_getInputValues","reset","UserInfo","profession","avatar","_profession","_avatar","userNameInfo","userProfessionInfo","about","userPhoto","Api","baseUrl","token","_baseUrl","_token","res","ok","json","Promise","reject","status","fetch","headers","authorization","then","_checkResponse","inputValues","method","body","JSON","stringify","cardId","userId","PopupConfirm","submitAction","_handleSubmitCallback","api","createCard","card","isLiked","removeLike","setLikes","catch","err","console","log","addLike","popupTypeOpenImage","open","popupTypeConfirm","setSubmitAction","cardDelete","removeCard","cardsList","cardsItem","addItem","all","getUserData","getCards","userData","userInfo","setUserInfo","setUserPhoto","renderItems","submitAddCardPopup","addNewCard","addItemPrepend","finally","submitEditAvatar","changeAvatar","submitEditProfPopup","editUserData","addFormValidator","resetValidation","getUserInfo","editAvatarFormValidator","setEventListeners","enableValidation"],"mappings":"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","file":"main.js","sourcesContent":["\n\n\nexport default class Card {\n  constructor(item, cardSelector, myId, {handleLikeClick, handleCardClick, handleDeleteClick}) {\n    this._item = item;\n    this._cardUserId = myId;\n    this._handleLikeClick = handleLikeClick;\n    this._handleCardClick = handleCardClick;\n    this._handleDeleteClick = handleDeleteClick;\n    this._handleCardClickHandler = this._handleCardClickHandler.bind(this);\n    this._cardSelector = cardSelector;\n\n\n  }\n\n  //копируем разметку\n\n  _getTemplate() {\n    const cardElement = document\n    .querySelector(this._cardSelector)\n    .content\n    .querySelector('.card')\n    .cloneNode(true);\n\n    return cardElement;\n  }\n\n  //создаем карточку\n\n  createCard() {\n    this._element = this._getTemplate();\n    this._cardImage = this._element.querySelector('.card__image')\n    this._cardImage.src = this._item.link;\n    this._cardImage.alt = this._item.name;\n    this._element.querySelector('.card__place-name').textContent = this._item.name;\n    this._showLikes();\n    this._hideCardRemoveButton();\n    this._setEventListeners();\n    return this._element;\n  }\n\n  //проверяем, нужно ли отображать кнопку удаления на карточке\n\n  _hideCardRemoveButton() {\n    if (this._item.owner._id !== this._cardUserId) {\n      this._element.querySelector('.card__remove-button').classList.add('card__remove-button_disactive');\n    }\n  }\n\n  //отображение аутальной информации о лайках\n  _showLikes() {\n    if (this._getIsLiked()) {\n      this._element.querySelector('.card__like-button').classList.add('card__like-button_active');\n    }\n    this._element.querySelector('.card__like-counter').textContent = this._item.likes.length;\n  }\n\n  removeCard() {\n    this._element.remove()\n  }\n\n//обработка открытия изображения\n\n  _handleCardClickHandler() {\n    this._handleCardClick(this._item.link, this._item.name);\n  }\n\n//функциональность добавить/убрать лайк\n\n//определяю лайкнута ли карточка пользователем, чтобы понять удалять лайк или добавлять\n_getIsLiked() {\n  if (this._item.likes.some(like => like._id === this._cardUserId)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\n  setLikes(likesInfo) {\n    this._item.likes = likesInfo;\n    if (this._getIsLiked()) {\n      this._element.querySelector('.card__like-button').classList.add('card__like-button_active');\n    }\n    else {\n      this._element.querySelector('.card__like-button').classList.remove('card__like-button_active');\n    }\n    this._element.querySelector('.card__like-counter').textContent = likesInfo.length;\n  }\n\n\n //установка слушателей на кнопки и элементы\n\n  _setEventListeners() {\n    this._element.querySelector('.card__like-button').addEventListener('click', () => {\n      this._handleLikeClick(this._item._id, this._getIsLiked());\n    });\n    this._element.querySelector('.card__remove-button').addEventListener('click', () => {\n      this._handleDeleteClick(this._item._id)\n      ;\n      // console.log(this._item._id)\n    })\n    this._cardImage.addEventListener('click', () => {\n      this._handleCardClickHandler(this._item.link,  this._item.name);\n    })\n  }\n\n}\n\n\n","const editForm = document.querySelector('.popup__form_edit-profile');\nconst addForm = document.querySelector('.popup__form_add-card');\nconst changeAvatarForm = document.querySelector(\".popup__form_change-avatar\")\nconst showImagePopup = document.querySelector('.popup_open-image');\nconst editButton = document.querySelector('.profile__edit-button');\nconst popupCloseButtonEditPopup = document.querySelector('.popup__close-button_edit-popup');\nconst popupCloseButtonAddPopup = document.querySelector('.popup__close-button_add-popup');\nconst popupCloseButtonShowImagePopup = document.querySelector('.popup__close-button_open-image');\nconst popupChangeAvatarButton = document.querySelector('.popup__close-button_change-avatar');\nconst nameProfile = document.querySelector('.profile__user-name');\nconst professionProfile = document.querySelector('.profile__profession');\nconst nameEditField = document.querySelector('.popup__field_name');\nconst professionEditField = document.querySelector('.popup__field_profession');\nconst cardsContainer = document.querySelector('.cards');\nconst addCardButton = document.querySelector('.profile__add-button');\nconst popupEditProfile = document.querySelector('.popup_edit-profile');\nconst popupAddCard = document.querySelector('.popup_add-card');\nconst popupEditAvatar = document.querySelector('.popup_change-avatar')\nconst placeField = document.querySelector('.popup__field_place-name');\nconst linkField = document.querySelector('.popup__field_link');\nconst popupShowImageCaption = document.querySelector('.popup__image-caption');\nconst cardImage = document.querySelector('.popup__image');\nconst escKey = 'Escape';\nconst formSaveButton = document.querySelector('.popup__save-button');\nconst formSaveButtonEditProfile = document.querySelector('.popup__save-button_edit-profile');\n// const formSaveButtonConfirmRemoval = document.querySelector('.popup__save-button_confirm-removal');\nconst formSaveButtonEditAvatar = document.querySelector('.popup__save-button_change-avatar');\nconst formSaveButtonInactive = document.querySelector('.popup__save-button_inactive')\nconst formSaveButtonAddCard =document.querySelector('.popup__save-button_add-card');\nconst cardRemoveButton = document.querySelector('.card__remove-button');\nconst popupConfirmRemoval = document.querySelector('.popup_confirm-removal');\nconst editAvatarButton = document.querySelector('.profile__edit-sign');\nconst avatarEditField = document.querySelector('.popup__field_avatar_link');\nconst avatarProfile = document.querySelector('.profile__avatar');\nconst inputs = document.querySelector('.popup__field')\n\nconst validationObj = {\n  formSelector: '.popup__form-fields',\n  inputSelector: '.popup__field',\n  saveButtonSelector: '.popup__save-button',\n  inputInvalidClass: 'popup__field_invalid',\n  buttonInvalidClass: 'popup__save-button_inactive',\n  }\n\nconst initialCards = [\n  {\n    name: 'Архыз',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg'\n  },\n  {\n    name: 'Челябинская область',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg'\n  },\n  {\n    name: 'Иваново',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg'\n  },\n  {\n    name: 'Камчатка',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg'\n  },\n  {\n    name: 'Холмогорский район',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg'\n  },\n  {\n    name: 'Байкал',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg'\n  }\n];\n\nexport {editForm, addForm, editButton, popupCloseButtonEditPopup, popupCloseButtonAddPopup,\n        popupCloseButtonShowImagePopup, nameProfile, professionProfile, nameEditField, professionEditField,\n        cardsContainer, addCardButton, popupEditProfile, popupAddCard, placeField, linkField, cardImage,\n        showImagePopup, popupShowImageCaption, validationObj, escKey, formSaveButton, formSaveButtonInactive,\n        initialCards, popupConfirmRemoval, popupEditAvatar, editAvatarButton, avatarEditField, popupChangeAvatarButton\n        ,avatarProfile, cardRemoveButton,formSaveButtonAddCard,changeAvatarForm, inputs, formSaveButtonEditProfile, formSaveButtonEditAvatar };\n\n\n","\nexport default class FormValidator {\n  constructor(obj, form) {\n    this._obj = obj;\n    this._form = form;\n    this._saveButton = form.querySelector(this._obj.saveButtonSelector);\n    this._inputsList = Array.from(this._form.querySelectorAll(this._obj.inputSelector));\n    // this._inputsList = inputsList;\n  }\n  _showInputError(input, errorMessage) {\n    const error = this._form.querySelector(`#${input.id}-error`);\n    error.textContent = errorMessage;\n    error.classList.add(this._inputInvalidClass);\n  }\n  _hideInputError(input){\n    const error = this._form.querySelector(`#${input.id}-error`);\n    error.textContent = \"\";\n    error.classList.remove(this._inputInvalidClass);\n  }\n  _checkInputValidity(input){\n    if(!input.validity.valid) {\n      this._showInputError(input, input.validationMessage);\n    } else {\n      this._hideInputError(input);\n    }\n  }\n\n  _toggleButtonState(isActive){\n    if(isActive) {\n      this._saveButton.classList.remove(this._obj.buttonInvalidClass);\n      this._saveButton.disabled = false;\n    } else {\n      this._saveButton.classList.add(this._obj.buttonInvalidClass);\n      this._saveButton.disabled = true;\n    }\n  }\n\n\n  _setEventListeners(){\n    // const inputsList = Array.from(this._form.querySelectorAll(this._obj.inputSelector));\n    // const saveButton = form.querySelector(this._obj.saveButtonSelector);\n    this._inputsList.forEach((input) => {\n      input.addEventListener('input', () => {\n        this._checkInputValidity(input);\n        this._toggleButtonState(this._form.checkValidity());\n      });\n    });\n  };\n\n  resetValidation() {\n    this._toggleButtonState();\n\n    this._inputsList.forEach((input) => {\n      this._hideInputError(input)\n    });\n\n  }\n\n  enableValidation(){\n    this._form.addEventListener('submit', evt => {\n      evt.preventDefault();\n    });\n    this._setEventListeners();\n  }\n}\n","//Перебор массива и отрисовка разметки на его основе\n//Класс Section решает отдельную задачу — вставку элементов в разметку\n\n\nexport default class Section {\n  constructor({renderer}, containerSelector) {\n    // this._initialArray = items;\n    this._renderer = renderer;\n    this._container = document.querySelector(containerSelector);\n\n  }\n\n  //метод ринимает параметр element и вставляет его в контейнер методом append\n\n  addItem(cardElement) {\n    this._container.append(cardElement);\n  }\n\n  addItemPrepend(cardElement) {\n    this._container.prepend(cardElement);\n  }\n  //метод перебирает массив данных и вставляет в контейнер методом addItem\n\n  renderItems(cards) {\n\n    cards.forEach(item => {\n      this._renderer(item);\n\n    });\n\n  }\n\n}\n","import {escKey} from './../../src/constants.js';\n\n\nexport default class Popup {\n  constructor(popup) {\n    this._popup = popup;\n    this._handleEscClose = this._handleEscClose.bind(this);\n  }\n\n  open() {\n    this._popup.classList.add('popup_opened');\n    document.addEventListener('keydown', this._handleEscClose);\n  }\n\n  close() {\n    this._popup.classList.remove('popup_opened');\n    document.removeEventListener('keydown', this._handleEscClose);\n  }\n\n  _handleEscClose(evt) {\n    if (evt.key === escKey) {\n\n      this.close();\n  }\n  }\n  _handleOverlayClose(evt) {\n    if (evt.target.classList.contains('popup')) {\n    this.close();\n    }\n  }\n\n  setEventListeners() {\n    this._popup.querySelector('.popup__close-button').addEventListener('click', () => this.close());\n    this._popup.addEventListener('mousedown', (evt) => this._handleOverlayClose(evt))\n  }\n}\n\n","import Popup from '../components/Popup.js';\n\nexport default class PopupWithImage extends Popup {\n  constructor(popup) {\n    super(popup);\n    this._link = popup.querySelector('.popup__image');\n    this._name = popup.querySelector('.popup__image-caption');\n  }\n\n    open(link, name) {\n      this._link.src = link;\n      this._link.alt = name;\n      this._name.textContent = name;\n      super.open();\n\n    }\n}\n\n","import Popup from '../components/Popup.js';\n\nexport default class PopupWithForm extends Popup {\n  constructor(popup, handleFormSubmit){  //принимает селектор попапа и кол-бэк формы - что должно происходить после нажатия кнопки submit\n  super(popup);\n  this._handleFormSubmit = handleFormSubmit;\n  this._form = this._popup.querySelector('.popup__form')\n\n}\n_getInputValues() {\n  this._inputList = this._popup.querySelectorAll('.popup__field'); //собираем поля формы\n  this._formValues = {};\n  this._inputList.forEach(input => this._formValues[input.name] = input.value); //записываем в this._formValues name поля формы = значение поля формы\n\n    return this._formValues;\n}\nsetEventListeners() {\n  super.setEventListeners();\n  this._form.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n      this._handleFormSubmit(this._getInputValues());\n  });\n}\n\nclose() {\n  super.close();\n  this._form.reset();\n}\n}\n","// Создайте класс `UserInfo`\n// Класс `UserInfo` отвечает за управление отображением информации о пользователе на странице. Этот класс:\n// - Принимает в конструктор объект с селекторами двух элементов: элемента имени пользователя и элемента информации о себе.\n// - Содержит публичный метод `getUserInfo`, который возвращает объект с данными пользователя. Этот метод пригодится когда данные пользователя нужно будет подставить в форму при открытии.\n// - Содержит публичный метод `setUserInfo,` который принимает новые данные пользователя и добавляет их на страницу.\n\nexport default class UserInfo {\n  constructor(name, profession, avatar) {\n    this._name = name;\n    this._profession = profession;\n    this._avatar = avatar;\n  }\n\n  getUserInfo() {\n    return {\n      userNameInfo: this._name.textContent,\n      userProfessionInfo: this._profession.textContent\n    }\n\n  }\n\n  setUserInfo({name, about}) {\n    this._name.textContent = name;\n    this._profession.textContent = about;\n\n  }\n\n  getUserPhoto() {\n    return {\n      userPhoto: this._avatar.src\n\n    }\n  }\n\n  setUserPhoto(avatar) {\n    this._avatar.src = avatar\n  }\n\n}\n","\nexport default class Api{\n  constructor(baseUrl, token){\n    this._baseUrl = baseUrl;\n    this._token = token;\n  }\n  // /получаем карточки с сервера\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n  }\n  return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n        headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(this._checkResponse)\n  }\n\n  //получаем инфо о пользователе с сервера\n\n  getUserData() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(this._checkResponse)\n  }\n\n  editUserData(inputValues) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: inputValues.name,\n        about: inputValues.about,\n\n    })\n  })\n    .then(this._checkResponse)\n  }\n\n  // создание новой карточки\n\n  addNewCard(inputValues) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: inputValues.name,\n        link: inputValues.link\n    })\n  })\n  .then(this._checkResponse)\n}\n\n  addLike(cardId,userId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n       body: JSON.stringify({\n          userId: userId ,\n       })\n    })\n    .then(this._checkResponse)\n    }\n\n\n  removeLike(cardId,userId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n       body: JSON.stringify({\n          userId: userId ,\n       })\n    })\n    .then(this._checkResponse)\n  }\n\n  cardDelete(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n\n    })\n    .then(this._checkResponse)\n  }\n\n  //запрос на обновление аватара\n\n  changeAvatar(inputValues) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n\n    },\n      body: JSON.stringify({\n        avatar: inputValues.avatar\n        })\n      })\n      .then(this._checkResponse)\n    }\n}\n","import '../pages/index.css';\nimport Card from '../components/Card.js';\nimport {editButton, addCardButton,editForm, addForm, popupEditProfile,\n        popupAddCard, showImagePopup, cardsContainer, initialCards,\n        validationObj, linkField, placeField, nameProfile, professionProfile,\n        nameEditField, professionEditField, formSaveButton, popupConfirmRemoval,\n        popupEditAvatar, editAvatarButton, popupChangeAvatarButton, avatarEditField,\n         avatarProfile,formSaveButtonAddCard, changeAvatarForm, formSaveButtonEditProfile,\n         formSaveButtonEditAvatar, formSaveButtonInactive, inputs} from '../constants.js';\nimport FormValidator from '../components/FormValidator.js';\nimport Section from '../components/Section.js';\nimport PopupWithImage from '../components/PopupWithImage.js'\nimport PopupWithForm from '../components/PopupWithForm.js'\nimport UserInfo from '../components/UserInfo.js';\nimport Api from '../components/Api.js';\nimport PopupConfirm from '../components/PopupConfirm.js';\nlet myId;\n\n\n\n\n\n\nconst api = new Api('https://mesto.nomoreparties.co/v1/cohort-21','9bbcd07b-4715-4a83-9142-c6a4a4b2ad04')\n\n//функция создания карточек массива из класса Card\n\nfunction createCard(item) {\n  const card = new Card(item, '.card-template',myId,{\n  handleLikeClick: (cardId,isLiked) => {\n    if(isLiked) {\n    api.removeLike(cardId,myId)\n      .then((likesInfo) => {\n        card.setLikes(likesInfo.likes)\n      })\n      .catch((err) =>\n      console.log(err))\n  } else {\n    api.addLike(cardId, myId)\n      .then((likesInfo) => {\n      card.setLikes(likesInfo.likes)\n      })\n      .catch((err) =>\n      console.log(err))\n  }},\n  handleCardClick: () => popupTypeOpenImage.open(item.link, item.name),\n  handleDeleteClick: (cardId) => {\n    popupTypeConfirm.open();\n    // console.log(cardId)\n    popupTypeConfirm.setSubmitAction(() => {\n      api.cardDelete(cardId)\n        .then(() => {\n          // console.log(item)\n          card.removeCard();\n          popupTypeConfirm.close();\n        })\n        .catch((err) =>\n        console.log(err))\n    }\n    )}\n  });\n    // card.hideCardRemoveButton();\n    // card.showLikes();\n    const cardElement = card.createCard(item);\n    return cardElement;\n}\n\n//создаем карточки из массива\n\nconst cardsList = new Section({\n    renderer: (item) => {\n\n// здесь хранится инструкция по работе с Card\n    const cardsItem = createCard(item);\n\n    cardsList.addItem(cardsItem);\n        },\n  },\n  '.cards'\n  );\n\n\n  Promise.all([\n    api.getUserData(),\n    api.getCards()\n  ])\n    .then(([userData, cards]) => {\n      userInfo.setUserInfo(userData);\n      userInfo.setUserPhoto(userData.avatar);\n      myId = userData._id;\n      console.log(myId),\n      cardsList.renderItems(cards);\n    })\n    .catch((error) => {\n      console.log(error);\n    })\n\n\n// обработка попапов\n\nconst popupTypeOpenImage = new PopupWithImage(showImagePopup);\nconst submitAddCardPopup = new PopupWithForm(popupAddCard, (inputValues) => {\n      api.addNewCard(inputValues)\n      .then((res) => {\n      const card = createCard(res);\n      cardsList.addItemPrepend(card);\n      submitAddCardPopup.close();\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n      .finally(() => formSaveButtonAddCard.textContent = 'Создать')\n      formSaveButtonAddCard.textContent = 'Сохранение...';\n});\nconst popupTypeConfirm = new PopupConfirm(popupConfirmRemoval);\n\nconst submitEditAvatar = new PopupWithForm(popupEditAvatar, (inputValues) => {\n  api.changeAvatar(inputValues)\n    .then((res) => {\n      // const ava = document.querySelector('.profile__avatar')\n      // ava.src = avatarEditField.value\n      userInfo.setUserPhoto(res.avatar)\n      submitEditAvatar.close();\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n    .finally(() => formSaveButtonEditAvatar.textContent = 'Сохранить')\n    formSaveButtonEditAvatar.textContent = 'Сохранение...'\n})\n\n\nconst userInfo = new UserInfo(nameProfile, professionProfile, avatarProfile);\nconst submitEditProfPopup = new PopupWithForm(popupEditProfile, (inputValues) => {\n  api.editUserData(inputValues) //отправляем новые данные на сервер\n    .then((res) => {\n      userInfo.setUserInfo(inputValues) //если данные ушли на сервер, обновляем их на странице\n      submitEditProfPopup.close();\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n    .finally(() => formSaveButtonEditProfile.textContent = 'Сохранить')\n    formSaveButtonEditProfile.textContent = 'Сохранение...'\n})\n\n\n\n\naddCardButton.addEventListener('click',() => {\n  submitAddCardPopup.open();\n  addFormValidator.resetValidation()});\n// })\neditButton.addEventListener('click', () => {\n  const userData = userInfo.getUserInfo();\n  nameEditField.value = userData.userNameInfo;\n  professionEditField.value = userData.userProfessionInfo;\n  submitEditProfPopup.open();\n  formSaveButton.textContent = 'Сохранить'\n})\neditAvatarButton.addEventListener('click', () => {\n  submitEditAvatar.open();\n  editAvatarFormValidator.resetValidation();\n  formSaveButton.textContent = 'Сохранить'\n})\n\n\npopupTypeOpenImage.setEventListeners();\nsubmitAddCardPopup.setEventListeners();\nsubmitEditProfPopup.setEventListeners();\nsubmitEditAvatar.setEventListeners();\npopupTypeConfirm.setEventListeners();\n\n\n\n\n\n// валидация\n\nconst editFormValidator = new FormValidator(validationObj, editForm);\neditFormValidator.enableValidation();\nconst addFormValidator = new FormValidator(validationObj, addForm);\naddFormValidator.enableValidation();\nconst editAvatarFormValidator = new FormValidator(validationObj, changeAvatarForm);\neditAvatarFormValidator.enableValidation();\n\n\n","import Popup from '../components/Popup.js';\n\nexport default class PopupConfirm extends Popup {\n  constructor(popup){  //принимает селектор попапа\n  super(popup);\n  this._form = this._popup.querySelector('.popup__form_confirm-removal');\n}\n\n\nsetSubmitAction(submitAction) {\n  this._handleSubmitCallback = submitAction;\n}\n\n\nsetEventListeners() {\n  super.setEventListeners();\n  this._form.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n    this._handleSubmitCallback();\n  });\n}}\n"],"sourceRoot":""}